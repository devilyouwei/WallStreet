{"code":"import * as generic_utils from '../utils/generic_utils';\r\nfunction isArrayItemInputOrOutputName(key, index, value) {\r\n    return (key === 'inboundNodes' || key === 'outputLayers' ||\r\n        key === 'inputLayers') &&\r\n        index === 0 && typeof value === 'string';\r\n}\r\nexport function convertPythonicToTs(pythonicConfig, key) {\r\n    if (pythonicConfig === null) {\r\n        return null;\r\n    }\r\n    else if (typeof pythonicConfig === 'string') {\r\n        return generic_utils.toCamelCase(pythonicConfig);\r\n    }\r\n    else if ((typeof pythonicConfig === 'number') ||\r\n        (typeof pythonicConfig === 'boolean')) {\r\n        return pythonicConfig;\r\n    }\r\n    else if (pythonicConfig instanceof Array) {\r\n        var tsArray = [];\r\n        var arrayLength = pythonicConfig.length;\r\n        for (var i = 0; i < arrayLength; ++i) {\r\n            var item = pythonicConfig[i];\r\n            if (isArrayItemInputOrOutputName(key, i, item)) {\r\n                tsArray.push(item);\r\n            }\r\n            else {\r\n                tsArray.push(convertPythonicToTs(item, key));\r\n            }\r\n        }\r\n        return tsArray;\r\n    }\r\n    else {\r\n        var tsDict = {};\r\n        for (var _i = 0, _a = Object.keys(pythonicConfig); _i < _a.length; _i++) {\r\n            var pythonicKey = _a[_i];\r\n            var pythonicValue = pythonicConfig[pythonicKey];\r\n            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\r\n                tsDict[pythonicKey] = pythonicValue;\r\n            }\r\n            else {\r\n                var tsKey = generic_utils.toCamelCase(pythonicKey);\r\n                tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\r\n            }\r\n        }\r\n        return tsDict;\r\n    }\r\n}\r\nexport function convertTsToPythonic(tsConfig, key) {\r\n    if (tsConfig === null || tsConfig === undefined) {\r\n        return null;\r\n    }\r\n    else if (typeof tsConfig === 'string') {\r\n        return generic_utils.toSnakeCase(tsConfig);\r\n    }\r\n    else if ((typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\r\n        return tsConfig;\r\n    }\r\n    else if (tsConfig instanceof Array) {\r\n        var pyArray = [];\r\n        var arrayLength = tsConfig.length;\r\n        for (var i = 0; i < arrayLength; ++i) {\r\n            var item = tsConfig[i];\r\n            if (isArrayItemInputOrOutputName(key, i, item)) {\r\n                pyArray.push(item);\r\n            }\r\n            else {\r\n                pyArray.push(convertTsToPythonic(item, key));\r\n            }\r\n        }\r\n        return pyArray;\r\n    }\r\n    else {\r\n        var pyDict = {};\r\n        for (var _i = 0, _a = Object.keys(tsConfig); _i < _a.length; _i++) {\r\n            var tsKey = _a[_i];\r\n            var tsValue = tsConfig[tsKey];\r\n            var pyKey = generic_utils.toSnakeCase(tsKey);\r\n            if ((tsKey === 'name' || tsKey === 'className') &&\r\n                typeof tsValue === 'string') {\r\n                pyDict[pyKey] = tsValue;\r\n            }\r\n            else {\r\n                pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\r\n            }\r\n        }\r\n        return pyDict;\r\n    }\r\n}\r\n//# sourceMappingURL=serialization_utils.js.map","map":"{\"version\":3,\"file\":\"serialization_utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/utils/serialization_utils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/utils/serialization_utils.d.ts","text":"import { serialization } from '@tensorflow/tfjs-core';\r\nimport { JsonValue } from '../types';\r\nexport declare function convertPythonicToTs(pythonicConfig: JsonValue, key?: string): serialization.ConfigDictValue;\r\nexport declare function convertTsToPythonic(tsConfig: serialization.ConfigDictValue, key?: string): JsonValue;\r\n"}}
