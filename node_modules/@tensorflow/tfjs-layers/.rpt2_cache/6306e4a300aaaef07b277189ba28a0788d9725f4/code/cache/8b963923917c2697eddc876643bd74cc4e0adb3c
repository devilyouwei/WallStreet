{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as tfc from '@tensorflow/tfjs-core';\r\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\r\nimport * as K from '../backend/tfjs_backend';\r\nimport { Layer } from '../engine/topology';\r\nimport { NotImplementedError, ValueError } from '../errors';\r\nimport * as generic_utils from '../utils/generic_utils';\r\nimport * as mathUtils from '../utils/math_utils';\r\nvar Merge = (function (_super) {\r\n    tslib_1.__extends(Merge, _super);\r\n    function Merge(config) {\r\n        var _this = _super.call(this, config || {}) || this;\r\n        _this.supportsMasking = true;\r\n        return _this;\r\n    }\r\n    Merge.prototype.mergeFunction = function (inputs) {\r\n        throw new NotImplementedError();\r\n    };\r\n    Merge.prototype.computeElementwiseOpOutputShape = function (shape1, shape2) {\r\n        if (shape1 == null || shape2 == null) {\r\n            return null;\r\n        }\r\n        else if (shape1.length < shape2.length) {\r\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\r\n        }\r\n        else if (shape2.length === 0) {\r\n            return shape1;\r\n        }\r\n        var outputShape = shape1.slice(0, shape1.length - shape2.length);\r\n        for (var k = 0; k < shape2.length; ++k) {\r\n            var i = shape1[shape1.length - shape2.length + k];\r\n            var j = shape2[k];\r\n            if (i == null || j == null || i < 0 || j < 0) {\r\n                outputShape.push(null);\r\n            }\r\n            else if (i === 1) {\r\n                outputShape.push(j);\r\n            }\r\n            else if (j === 1) {\r\n                outputShape.push(i);\r\n            }\r\n            else {\r\n                if (i !== j) {\r\n                    throw new ValueError('Operands could not be broadcast together with shapes ' +\r\n                        JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\r\n                }\r\n                outputShape.push(i);\r\n            }\r\n        }\r\n        return outputShape;\r\n    };\r\n    Merge.prototype.build = function (inputShape) {\r\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\r\n            inputShape = [generic_utils.getExactlyOneShape(inputShape)];\r\n        }\r\n        inputShape = inputShape;\r\n        if (inputShape.length < 2) {\r\n            throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' +\r\n                (\" Got \" + inputShape.length + \" input(s).\"));\r\n        }\r\n        var batchSizes = [];\r\n        for (var _i = 0, inputShape_1 = inputShape; _i < inputShape_1.length; _i++) {\r\n            var shape = inputShape_1[_i];\r\n            if (shape != null && shape[0] !== null) {\r\n                batchSizes.push(shape[0]);\r\n            }\r\n        }\r\n        batchSizes = generic_utils.unique(batchSizes);\r\n        if (batchSizes.length > 1) {\r\n            throw new ValueError(\"Can not merge tensors with different batch sizes. \" +\r\n                (\"Got tensors with shapes: \" + JSON.stringify(inputShape) + \".\"));\r\n        }\r\n        var outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\r\n        for (var i = 1; i < inputShape.length; ++i) {\r\n            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\r\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\r\n        }\r\n        var allRanks = inputShape.map(function (shape) { return shape.length; });\r\n        if (inputShape.indexOf(null) === -1 &&\r\n            generic_utils.unique(allRanks).length === 1) {\r\n            this.reshapeRequired = false;\r\n        }\r\n        else {\r\n            this.reshapeRequired = true;\r\n        }\r\n    };\r\n    Merge.prototype.call = function (inputs, kwargs) {\r\n        var _this = this;\r\n        return tidy(function () {\r\n            inputs = inputs;\r\n            if (_this.reshapeRequired) {\r\n                var reshapedInputs = [];\r\n                var inputDims = inputs.map(function (input) { return input.rank; });\r\n                if (inputDims.indexOf(null) === -1) {\r\n                    var maxNDim = mathUtils.max(inputDims);\r\n                    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\r\n                        var x = inputs_1[_i];\r\n                        var xNDim = x.rank;\r\n                        for (var k = 0; k < maxNDim - xNDim; ++k) {\r\n                            x = K.expandDims(x, 1);\r\n                        }\r\n                        reshapedInputs.push(x);\r\n                    }\r\n                    return _this.mergeFunction(reshapedInputs);\r\n                }\r\n                else {\r\n                    var transposed = false;\r\n                    for (var _a = 0, inputs_2 = inputs; _a < inputs_2.length; _a++) {\r\n                        var x = inputs_2[_a];\r\n                        var xNDim = x.rank;\r\n                        if (xNDim == null) {\r\n                            var xShape = K.shape(x);\r\n                            var batchSize = xShape[0];\r\n                            var newShape = xShape.slice(1).concat([batchSize]);\r\n                            var xTransposed = x.reshape([batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\r\n                            xTransposed = tfc.transpose(xTransposed, [1, 0]);\r\n                            xTransposed = xTransposed.reshape(newShape);\r\n                            reshapedInputs.push(xTransposed);\r\n                            transposed = true;\r\n                        }\r\n                        else if (xNDim > 1) {\r\n                            var dims = mathUtils.range(1, xNDim).concat([0]);\r\n                            reshapedInputs.push(tfc.transpose(x, dims));\r\n                            transposed = true;\r\n                        }\r\n                        else {\r\n                            reshapedInputs.push(x);\r\n                        }\r\n                    }\r\n                    var y = _this.mergeFunction(reshapedInputs);\r\n                    var yNDim = y.rank;\r\n                    if (transposed) {\r\n                        if (yNDim == null) {\r\n                            var yShape = K.shape(y);\r\n                            var yNDim_1 = yShape.length;\r\n                            var batchSize = yShape[yNDim_1 - 1];\r\n                            var newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\r\n                            y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0])\r\n                                .reshape(newShape);\r\n                        }\r\n                        else if (yNDim > 1) {\r\n                            var dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\r\n                            y = tfc.transpose(y, dims);\r\n                        }\r\n                    }\r\n                    return y;\r\n                }\r\n            }\r\n            else {\r\n                return _this.mergeFunction(inputs);\r\n            }\r\n        });\r\n    };\r\n    Merge.prototype.computeOutputShape = function (inputShape) {\r\n        inputShape = inputShape;\r\n        var outputShape;\r\n        if (inputShape[0] == null) {\r\n            outputShape = null;\r\n        }\r\n        else {\r\n            outputShape = inputShape[0].slice(1);\r\n        }\r\n        for (var i = 1; i < inputShape.length; ++i) {\r\n            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\r\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\r\n        }\r\n        var batchSizes = [];\r\n        for (var _i = 0, inputShape_2 = inputShape; _i < inputShape_2.length; _i++) {\r\n            var shape = inputShape_2[_i];\r\n            if (shape != null && shape[0] !== null) {\r\n                batchSizes.push(shape[0]);\r\n            }\r\n        }\r\n        batchSizes = generic_utils.unique(batchSizes);\r\n        if (batchSizes.length === 1) {\r\n            outputShape = batchSizes.concat(outputShape);\r\n        }\r\n        else {\r\n            outputShape = [null].concat(outputShape);\r\n        }\r\n        return outputShape;\r\n    };\r\n    return Merge;\r\n}(Layer));\r\nexport { Merge };\r\nvar Add = (function (_super) {\r\n    tslib_1.__extends(Add, _super);\r\n    function Add(config) {\r\n        return _super.call(this, config) || this;\r\n    }\r\n    Add.prototype.mergeFunction = function (inputs) {\r\n        return tidy(function () {\r\n            var output = tfc.zeros(inputs[0].shape);\r\n            for (var _i = 0, inputs_3 = inputs; _i < inputs_3.length; _i++) {\r\n                var input = inputs_3[_i];\r\n                output = tfc.add(output, input);\r\n            }\r\n            return output;\r\n        });\r\n    };\r\n    Add.className = 'Add';\r\n    return Add;\r\n}(Merge));\r\nexport { Add };\r\nserialization.SerializationMap.register(Add);\r\nexport function add(config) {\r\n    if (Array.isArray(config)) {\r\n        var layer = new Add({});\r\n        return layer.apply(config);\r\n    }\r\n    else {\r\n        return new Add(config);\r\n    }\r\n}\r\nvar Multiply = (function (_super) {\r\n    tslib_1.__extends(Multiply, _super);\r\n    function Multiply(config) {\r\n        return _super.call(this, config) || this;\r\n    }\r\n    Multiply.prototype.mergeFunction = function (inputs) {\r\n        return tidy(function () {\r\n            var output = tfc.ones(inputs[0].shape);\r\n            for (var _i = 0, inputs_4 = inputs; _i < inputs_4.length; _i++) {\r\n                var input = inputs_4[_i];\r\n                output = tfc.mul(output, input);\r\n            }\r\n            return output;\r\n        });\r\n    };\r\n    Multiply.className = 'Multiply';\r\n    return Multiply;\r\n}(Merge));\r\nexport { Multiply };\r\nserialization.SerializationMap.register(Multiply);\r\nexport function multiply(config) {\r\n    if (Array.isArray(config)) {\r\n        var layer = new Multiply({});\r\n        return layer.apply(config);\r\n    }\r\n    else {\r\n        return new Multiply(config);\r\n    }\r\n}\r\nvar Average = (function (_super) {\r\n    tslib_1.__extends(Average, _super);\r\n    function Average(config) {\r\n        return _super.call(this, config) || this;\r\n    }\r\n    Average.prototype.mergeFunction = function (inputs) {\r\n        return tidy(function () {\r\n            var output = tfc.zeros(inputs[0].shape);\r\n            for (var _i = 0, inputs_5 = inputs; _i < inputs_5.length; _i++) {\r\n                var input = inputs_5[_i];\r\n                output = tfc.add(output, input);\r\n            }\r\n            return K.scalarTimesArray(K.getScalar(1 / inputs.length), output);\r\n        });\r\n    };\r\n    Average.className = 'Average';\r\n    return Average;\r\n}(Merge));\r\nexport { Average };\r\nserialization.SerializationMap.register(Average);\r\nexport function average(config) {\r\n    if (Array.isArray(config)) {\r\n        var layer = new Average({});\r\n        return layer.apply(config);\r\n    }\r\n    else {\r\n        return new Average(config);\r\n    }\r\n}\r\nvar Maximum = (function (_super) {\r\n    tslib_1.__extends(Maximum, _super);\r\n    function Maximum(config) {\r\n        return _super.call(this, config) || this;\r\n    }\r\n    Maximum.prototype.mergeFunction = function (inputs) {\r\n        return tidy(function () {\r\n            var output = inputs[0];\r\n            for (var i = 1; i < inputs.length; ++i) {\r\n                output = tfc.maximum(output, inputs[i]);\r\n            }\r\n            return output;\r\n        });\r\n    };\r\n    Maximum.className = 'Maximum';\r\n    return Maximum;\r\n}(Merge));\r\nexport { Maximum };\r\nserialization.SerializationMap.register(Maximum);\r\nexport function maximum(config) {\r\n    if (Array.isArray(config)) {\r\n        var layer = new Maximum({});\r\n        return layer.apply(config);\r\n    }\r\n    else {\r\n        return new Maximum(config);\r\n    }\r\n}\r\nvar Minimum = (function (_super) {\r\n    tslib_1.__extends(Minimum, _super);\r\n    function Minimum(config) {\r\n        return _super.call(this, config) || this;\r\n    }\r\n    Minimum.prototype.mergeFunction = function (inputs) {\r\n        return tidy(function () {\r\n            var output = inputs[0];\r\n            for (var i = 1; i < inputs.length; ++i) {\r\n                output = tfc.minimum(output, inputs[i]);\r\n            }\r\n            return output;\r\n        });\r\n    };\r\n    Minimum.className = 'Minimum';\r\n    return Minimum;\r\n}(Merge));\r\nexport { Minimum };\r\nserialization.SerializationMap.register(Minimum);\r\nexport function minimum(config) {\r\n    if (Array.isArray(config)) {\r\n        var layer = new Minimum({});\r\n        return layer.apply(config);\r\n    }\r\n    else {\r\n        return new Minimum(config);\r\n    }\r\n}\r\nvar Concatenate = (function (_super) {\r\n    tslib_1.__extends(Concatenate, _super);\r\n    function Concatenate(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.DEFAULT_AXIS = -1;\r\n        if (config == null) {\r\n            config = {};\r\n        }\r\n        _this.axis = config.axis == null ? _this.DEFAULT_AXIS : config.axis;\r\n        _this.supportsMasking = true;\r\n        _this.reshapeRequired = false;\r\n        return _this;\r\n    }\r\n    Concatenate.prototype.build = function (inputShape) {\r\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\r\n            inputShape.length === 1) {\r\n            throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' +\r\n                'inputs');\r\n        }\r\n        inputShape = inputShape;\r\n        var allNoneShape = true;\r\n        for (var _i = 0, inputShape_3 = inputShape; _i < inputShape_3.length; _i++) {\r\n            var shape = inputShape_3[_i];\r\n            if (shape != null) {\r\n                allNoneShape = false;\r\n                break;\r\n            }\r\n        }\r\n        if (allNoneShape) {\r\n            return;\r\n        }\r\n        var shapeSet = [];\r\n        for (var i = 0; i < inputShape.length; ++i) {\r\n            var shapeWithoutConcatAxis = inputShape[i].slice();\r\n            shapeWithoutConcatAxis.splice(this.axis, 1);\r\n            var exists = false;\r\n            for (var _a = 0, shapeSet_1 = shapeSet; _a < shapeSet_1.length; _a++) {\r\n                var shape = shapeSet_1[_a];\r\n                if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\r\n                    exists = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!exists) {\r\n                shapeSet.push(shapeWithoutConcatAxis);\r\n            }\r\n        }\r\n        if (shapeSet.length > 1) {\r\n            throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' +\r\n                'except for the concat axis. Got input shapes: ' +\r\n                JSON.stringify(inputShape));\r\n        }\r\n    };\r\n    Concatenate.prototype.mergeFunction = function (inputs) {\r\n        var _this = this;\r\n        return tidy(function () {\r\n            return K.concatenate(inputs, _this.axis);\r\n        });\r\n    };\r\n    Concatenate.prototype.computeOutputShape = function (inputShape) {\r\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\r\n            throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\r\n        }\r\n        var inputShapes = inputShape;\r\n        var outputShape = inputShapes[0].slice();\r\n        var axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\r\n        for (var _i = 0, _a = inputShapes.slice(1); _i < _a.length; _i++) {\r\n            var shape = _a[_i];\r\n            if (outputShape[axis] == null || shape[axis] == null) {\r\n                outputShape[axis] = null;\r\n                break;\r\n            }\r\n            outputShape[axis] += shape[axis];\r\n        }\r\n        return outputShape;\r\n    };\r\n    Concatenate.prototype.getConfig = function () {\r\n        var config = {\r\n            'axis': this.axis,\r\n        };\r\n        var baseConfig = _super.prototype.getConfig.call(this);\r\n        Object.assign(config, baseConfig);\r\n        return config;\r\n    };\r\n    Concatenate.className = 'Concatenate';\r\n    return Concatenate;\r\n}(Merge));\r\nexport { Concatenate };\r\nserialization.SerializationMap.register(Concatenate);\r\nexport function concatenate(config) {\r\n    if (Array.isArray(config)) {\r\n        var layer = new Concatenate({});\r\n        return layer.apply(config);\r\n    }\r\n    else {\r\n        return new Concatenate(config);\r\n    }\r\n}\r\n//# sourceMappingURL=merge.js.map","map":"{\"version\":3,\"file\":\"merge.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/layers/merge.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/layers/merge.d.ts","text":"import { serialization, Tensor } from '@tensorflow/tfjs-core';\r\nimport { Layer, LayerConfig } from '../engine/topology';\r\nimport { Kwargs, Shape, SymbolicTensor } from '../types';\r\nexport declare abstract class Merge extends Layer {\r\n    protected reshapeRequired: boolean;\r\n    constructor(config?: LayerConfig);\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n    private computeElementwiseOpOutputShape(shape1, shape2);\r\n    build(inputShape: Shape | Shape[]): void;\r\n    call(inputs: Tensor | Tensor[], kwargs: Kwargs): Tensor | Tensor[];\r\n    computeOutputShape(inputShape: Shape | Shape[]): Shape | Shape[];\r\n}\r\nexport declare class Add extends Merge {\r\n    static className: string;\r\n    constructor(config?: LayerConfig);\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n}\r\nexport declare function add(config?: SymbolicTensor[] | Tensor[] | LayerConfig): Layer | SymbolicTensor | Tensor;\r\nexport declare class Multiply extends Merge {\r\n    static className: string;\r\n    constructor(config?: LayerConfig);\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n}\r\nexport declare function multiply(config?: SymbolicTensor[] | Tensor[] | LayerConfig): Layer | SymbolicTensor | Tensor;\r\nexport declare class Average extends Merge {\r\n    static className: string;\r\n    constructor(config?: LayerConfig);\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n}\r\nexport declare function average(config?: SymbolicTensor[] | Tensor[] | LayerConfig): Layer | SymbolicTensor | Tensor;\r\nexport declare class Maximum extends Merge {\r\n    static className: string;\r\n    constructor(config?: LayerConfig);\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n}\r\nexport declare function maximum(config?: SymbolicTensor[] | Tensor[] | LayerConfig): Layer | SymbolicTensor | Tensor;\r\nexport declare class Minimum extends Merge {\r\n    static className: string;\r\n    constructor(config?: LayerConfig);\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n}\r\nexport declare function minimum(config?: SymbolicTensor[] | Tensor[] | LayerConfig): Layer | SymbolicTensor | Tensor;\r\nexport interface ConcatenateLayerConfig extends LayerConfig {\r\n    axis?: number;\r\n}\r\nexport declare class Concatenate extends Merge {\r\n    static className: string;\r\n    readonly DEFAULT_AXIS: number;\r\n    private readonly axis;\r\n    constructor(config?: ConcatenateLayerConfig);\r\n    build(inputShape: Shape | Shape[]): void;\r\n    protected mergeFunction(inputs: Tensor[]): Tensor;\r\n    computeOutputShape(inputShape: Shape | Shape[]): Shape | Shape[];\r\n    getConfig(): serialization.ConfigDict;\r\n}\r\nexport declare function concatenate(config?: SymbolicTensor[] | Tensor[] | ConcatenateLayerConfig): Layer | SymbolicTensor | Tensor;\r\n"}}
