{"code":"import { ValueError } from '../errors';\r\nimport { InputLayer } from './topology';\r\nfunction assertFeedCompatibility(key, val) {\r\n    if (key.dtype != null && key.dtype !== val.dtype) {\r\n        throw new ValueError(\"The dtype of the feed (\" + val.dtype + \") is incompatible with that of \" +\r\n            (\"the key '\" + key.name + \"' (\" + key.dtype + \").\"));\r\n    }\r\n    if (key.shape != null) {\r\n        if (key.shape.length !== val.shape.length) {\r\n            throw new ValueError(\"The rank of feed (\" + val.shape.length + \") does not match the rank of \" +\r\n                (\"the key (\" + key.shape.length + \").\"));\r\n        }\r\n        for (var i = 0; i < key.shape.length; ++i) {\r\n            if (key.shape[i] != null && key.shape[i] !== val.shape[i]) {\r\n                throw new ValueError(\"The \" + i + \"-th dimension of the feed (\" + val.shape[i] + \") is \" +\r\n                    (\"incompatible with that of the key (\" + key.shape[i] + \").\"));\r\n            }\r\n        }\r\n    }\r\n}\r\nvar FeedDict = (function () {\r\n    function FeedDict(feeds) {\r\n        this.id2Value = {};\r\n        if (feeds instanceof FeedDict) {\r\n            for (var id in feeds.id2Value) {\r\n                this.id2Value[id] = feeds.id2Value[id];\r\n            }\r\n        }\r\n        else {\r\n            if (feeds == null) {\r\n                return;\r\n            }\r\n            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {\r\n                var feed = feeds_1[_i];\r\n                this.add(feed.key, feed.value);\r\n            }\r\n        }\r\n    }\r\n    FeedDict.prototype.add = function (key, value) {\r\n        assertFeedCompatibility(key, value);\r\n        if (this.id2Value[key.id] == null) {\r\n            this.id2Value[key.id] = value;\r\n        }\r\n        else {\r\n            throw new ValueError(\"Duplicate key: name=\" + key.name + \", id=\" + key.id);\r\n        }\r\n        return this;\r\n    };\r\n    FeedDict.prototype.addFeed = function (feed) {\r\n        this.add(feed.key, feed.value);\r\n    };\r\n    FeedDict.prototype.hasKey = function (key) {\r\n        return this.id2Value[key.id] != null;\r\n    };\r\n    FeedDict.prototype.getValue = function (key) {\r\n        if (this.id2Value[key.id] == null) {\r\n            throw new ValueError(\"Nonexistent key: \" + JSON.stringify(key));\r\n        }\r\n        else {\r\n            return this.id2Value[key.id];\r\n        }\r\n    };\r\n    return FeedDict;\r\n}());\r\nexport { FeedDict };\r\nexport function execute(fetches, feedDict, kwargs) {\r\n    var arrayFetches = Array.isArray(fetches);\r\n    var fetchArray = arrayFetches ? fetches : [fetches];\r\n    var outputs = [];\r\n    var internalFeedDict = new FeedDict(feedDict);\r\n    for (var _i = 0, fetchArray_1 = fetchArray; _i < fetchArray_1.length; _i++) {\r\n        var fetch_1 = fetchArray_1[_i];\r\n        outputs.push(executeInternal(fetch_1, internalFeedDict, kwargs));\r\n    }\r\n    return arrayFetches ? outputs : outputs[0];\r\n}\r\nfunction executeInternal(fetch, internalFeedDict, kwargs) {\r\n    if (internalFeedDict.hasKey(fetch)) {\r\n        return internalFeedDict.getValue(fetch);\r\n    }\r\n    if (fetch.sourceLayer instanceof InputLayer) {\r\n        throw new ValueError(\"Missing a feed value for SymbolicTensor from InputLayer \" +\r\n            (\"'\" + InputLayer.name + \"'\"));\r\n    }\r\n    var inputs = fetch.inputs;\r\n    var inputValues = [];\r\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\r\n        var input = inputs_1[_i];\r\n        var inputVal = executeInternal(input, internalFeedDict, kwargs);\r\n        inputValues.push(inputVal);\r\n    }\r\n    var output = fetch.sourceLayer.apply(inputValues, kwargs);\r\n    if (!Array.isArray(output)) {\r\n        output = [output];\r\n    }\r\n    var layerOutputs = getNodeOutputs(fetch);\r\n    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\r\n    for (var i = 0; i < outputSymbolicTensors.length; ++i) {\r\n        internalFeedDict.add(outputSymbolicTensors[i], output[i]);\r\n    }\r\n    return output.length === 1 ? output[0] : output[fetch.outputTensorIndex];\r\n}\r\nfunction getNodeOutputs(fetch) {\r\n    var layerOutputs;\r\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\r\n        layerOutputs = fetch.sourceLayer.output;\r\n    }\r\n    else {\r\n        var nodeIndex = null;\r\n        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\r\n            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i]\r\n                .outputTensors; _i < _a.length; _i++) {\r\n                var outputTensor = _a[_i];\r\n                if (outputTensor.id === fetch.id) {\r\n                    nodeIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\r\n    }\r\n    return layerOutputs;\r\n}\r\n//# sourceMappingURL=executor.js.map","map":"{\"version\":3,\"file\":\"executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/engine/executor.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/engine/executor.d.ts","text":"import { Tensor } from '@tensorflow/tfjs-core';\r\nimport { Kwargs, SymbolicTensor } from '../types';\r\nexport interface Feed {\r\n    key: SymbolicTensor;\r\n    value: Tensor;\r\n}\r\nexport declare class FeedDict {\r\n    private id2Value;\r\n    constructor(feeds?: Feed[] | FeedDict);\r\n    add(key: SymbolicTensor, value: Tensor): FeedDict;\r\n    addFeed(feed: Feed): void;\r\n    hasKey(key: SymbolicTensor): boolean;\r\n    getValue(key: SymbolicTensor): Tensor;\r\n}\r\nexport declare function execute(fetches: SymbolicTensor | SymbolicTensor[], feedDict: FeedDict, kwargs?: Kwargs): Tensor | Tensor[] | [Tensor | Tensor[]];\r\n"}}
