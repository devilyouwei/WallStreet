{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '@tensorflow/tfjs-core';\r\nimport { getScopedTensorName, getUniqueTensorName } from './common';\r\nvar _nextUniqueTensorId = 0;\r\nexport function getNextUniqueTensorId() {\r\n    return _nextUniqueTensorId++;\r\n}\r\nvar SymbolicTensor = (function () {\r\n    function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\r\n        this.dtype = dtype;\r\n        this.shape = shape;\r\n        this.sourceLayer = sourceLayer;\r\n        this.inputs = inputs;\r\n        this.callArgs = callArgs;\r\n        this.outputTensorIndex = outputTensorIndex;\r\n        this.id = getNextUniqueTensorId();\r\n        if (name != null) {\r\n            this.originalName = getScopedTensorName(name);\r\n            this.name = getUniqueTensorName(this.originalName);\r\n        }\r\n        this.rank = shape.length;\r\n    }\r\n    SymbolicTensor = tslib_1.__decorate([\r\n        doc({ heading: 'Models', 'subheading': 'Classes' })\r\n    ], SymbolicTensor);\r\n    return SymbolicTensor;\r\n}());\r\nexport { SymbolicTensor };\r\n//# sourceMappingURL=types.js.map","map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"src/types.ts\"],\"names\":[],\"mappings\":\";AAaA,OAAO,EAAW,GAAG,EAAiB,MAAM,uBAAuB,CAAC;AAEpE,OAAO,EAAC,mBAAmB,EAAE,mBAAmB,EAAC,MAAM,UAAU,CAAC;AAYlE,IAAI,mBAAmB,GAAG,CAAC,CAAC;AAE5B,MAAM;IACJ,OAAO,mBAAmB,EAAE,CAAC;AAC/B,CAAC;AASD;IAmCE,wBACa,KAAe,EAAW,KAAY,EACxC,WAAkB,EAAW,MAAwB,EACnD,QAAgB,EAAE,IAAa,EAC/B,iBAA0B;QAH1B,UAAK,GAAL,KAAK,CAAU;QAAW,UAAK,GAAL,KAAK,CAAO;QACxC,gBAAW,GAAX,WAAW,CAAO;QAAW,WAAM,GAAN,MAAM,CAAkB;QACnD,aAAQ,GAAR,QAAQ,CAAQ;QAChB,sBAAiB,GAAjB,iBAAiB,CAAS;QACrC,IAAI,CAAC,EAAE,GAAG,qBAAqB,EAAE,CAAC;QAClC,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IA9CU,cAAc;QAD1B,GAAG,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAC,CAAC;OACrC,cAAc,CA+C1B;IAAD,qBAAC;CAAA,AA/CD,IA+CC;SA/CY,cAAc\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/types.d.ts","text":"import { DataType, Scalar, Tensor } from '@tensorflow/tfjs-core';\r\nimport { Layer } from './engine/topology';\r\nexport declare type Shape = number[];\r\nexport declare function getNextUniqueTensorId(): number;\r\nexport declare class SymbolicTensor {\r\n    readonly dtype: DataType;\r\n    readonly shape: Shape;\r\n    sourceLayer: Layer;\r\n    readonly inputs: SymbolicTensor[];\r\n    readonly callArgs: Kwargs;\r\n    readonly outputTensorIndex: number;\r\n    readonly id: number;\r\n    readonly name?: string;\r\n    readonly originalName?: string;\r\n    readonly rank: number;\r\n    nodeIndex: number;\r\n    tensorIndex: number;\r\n    constructor(dtype: DataType, shape: Shape, sourceLayer: Layer, inputs: SymbolicTensor[], callArgs: Kwargs, name?: string, outputTensorIndex?: number);\r\n}\r\nexport declare type LossOrMetricFn = (yTrue: Tensor, yPred: Tensor) => Tensor;\r\nexport declare type RegularizerFn = () => Scalar;\r\nexport declare type RnnStepFunction = (inputs: Tensor, states: Tensor[]) => [Tensor, Tensor[]];\r\nexport declare type NamedTensorMap = {\r\n    [name: string]: Tensor;\r\n};\r\nexport declare type JsonValue = boolean | number | string | null | JsonArray | JsonDict;\r\nexport interface JsonDict {\r\n    [key: string]: JsonValue;\r\n}\r\nexport interface JsonArray extends Array<JsonValue> {\r\n}\r\nexport declare type Kwargs = {\r\n    [key: string]: any;\r\n};\r\n"}}
