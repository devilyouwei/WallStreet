{"code":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { randomNormal } from './backend/tfjs_backend';\r\nimport { getScopedTensorName, getUniqueTensorName } from './common';\r\nimport { NotImplementedError } from './errors';\r\nimport { getNextUniqueTensorId } from './types';\r\nvar DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\r\nvar LayerVariable = (function () {\r\n    function LayerVariable(val, dtype, name, trainable, constraint) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (name === void 0) { name = DEFAULT_VARIABLE_NAME_PREFIX; }\r\n        if (trainable === void 0) { trainable = true; }\r\n        if (constraint === void 0) { constraint = null; }\r\n        this.dtype = dtype == null ? 'float32' : dtype;\r\n        this.shape = val.shape;\r\n        this.id = getNextUniqueTensorId();\r\n        name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\r\n        this.originalName = getScopedTensorName(name);\r\n        this.name = getUniqueTensorName(this.originalName);\r\n        this.trainable = trainable;\r\n        this.constraint = constraint;\r\n        this.val = tfc.variable(val, this.trainable, this.name, this.dtype);\r\n    }\r\n    LayerVariable.prototype.read = function () {\r\n        return this.val;\r\n    };\r\n    LayerVariable.prototype.write = function (newVal) {\r\n        checkShapesMatch(this.val, newVal);\r\n        this.val.assign(newVal);\r\n        if (this.constraint != null) {\r\n            this.val.assign(this.constraint.apply(this.val));\r\n        }\r\n        return this;\r\n    };\r\n    return LayerVariable;\r\n}());\r\nexport { LayerVariable };\r\nfunction checkShapesMatch(x, y) {\r\n    if (x.shape.toString() !== y.shape.toString()) {\r\n        throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\r\n            JSON.stringify(y.shape));\r\n    }\r\n}\r\nexport function variable(x, dtype, name, constraint) {\r\n    return new LayerVariable(x, dtype, name, true, constraint);\r\n}\r\nexport function zerosVariable(shape, dtype, name) {\r\n    return new LayerVariable(tfc.zeros(shape), dtype, name);\r\n}\r\nexport function zerosLike(x, dtype, name) {\r\n    return new LayerVariable(tfc.zerosLike(x), dtype, name);\r\n}\r\nexport function onesVariable(shape, dtype, name) {\r\n    var allocated = tfc.ones(shape);\r\n    return new LayerVariable(allocated, dtype, name);\r\n}\r\nexport function onesLike(x, dtype, name) {\r\n    var allocated = tfc.onesLike(x);\r\n    return new LayerVariable(allocated, dtype, name);\r\n}\r\nexport function eyeVariable(size, dtype, name) {\r\n    return new LayerVariable(tfc.eye(size), dtype, name);\r\n}\r\nexport function randomUniformVariable(shape, minval, maxval, dtype, seed, name) {\r\n    if (name === void 0) { name = 'randomUniform'; }\r\n    return new LayerVariable(tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\r\n}\r\nexport function truncatedNormalVariable(shape, mean, stddev, dtype, seed, name) {\r\n    if (mean === void 0) { mean = 0.0; }\r\n    if (stddev === void 0) { stddev = 1.0; }\r\n    if (name === void 0) { name = 'truncatedNormal'; }\r\n    if (dtype === 'bool') {\r\n        throw new NotImplementedError(\"randomNormal does not support dType bool.\");\r\n    }\r\n    return new LayerVariable(tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\r\n}\r\nexport function randomNormalVariable(shape, mean, stddev, dtype, seed, name) {\r\n    if (mean === void 0) { mean = 0.0; }\r\n    if (stddev === void 0) { stddev = 1.0; }\r\n    if (name === void 0) { name = 'randomNormal'; }\r\n    if (dtype === 'bool') {\r\n        throw new NotImplementedError(\"randomNormalVariable does not support dType bool.\");\r\n    }\r\n    return new LayerVariable(randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\r\n}\r\nexport function update(x, xNew) {\r\n    return x.write(xNew);\r\n}\r\nexport function updateAdd(x, increment) {\r\n    return x.write(tfc.add(x.read(), increment));\r\n}\r\nexport function updateSub(x, decrement) {\r\n    return x.write(tfc.sub(x.read(), decrement));\r\n}\r\nexport function batchGetValue(xs) {\r\n    return xs.map(function (x) { return x.read(); });\r\n}\r\nexport function batchSetValue(variablesAndValues) {\r\n    variablesAndValues.map(function (variableAndValue) {\r\n        var variable = variableAndValue[0];\r\n        variable.write(variableAndValue[1]);\r\n    });\r\n}\r\n//# sourceMappingURL=variables.js.map","map":"{\"version\":3,\"file\":\"variables.js\",\"sourceRoot\":\"\",\"sources\":[\"src/variables.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/variables.d.ts","text":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { DataType, Tensor } from '@tensorflow/tfjs-core';\r\nimport { Constraint } from './constraints';\r\nimport { Shape } from './types';\r\nexport declare class LayerVariable {\r\n    readonly dtype: DataType;\r\n    readonly shape: Shape;\r\n    readonly id: number;\r\n    readonly name: string;\r\n    readonly originalName: string;\r\n    readonly trainable: boolean;\r\n    protected readonly val: tfc.Variable;\r\n    readonly constraint: Constraint;\r\n    constructor(val: Tensor, dtype?: DataType, name?: string, trainable?: boolean, constraint?: Constraint);\r\n    read(): Tensor;\r\n    write(newVal: Tensor): this;\r\n}\r\nexport declare function variable(x: Tensor, dtype?: DataType, name?: string, constraint?: Constraint): LayerVariable;\r\nexport declare function zerosVariable(shape: Shape, dtype?: DataType, name?: string): LayerVariable;\r\nexport declare function zerosLike(x: Tensor, dtype?: DataType, name?: string): LayerVariable;\r\nexport declare function onesVariable(shape: Shape, dtype?: DataType, name?: string): LayerVariable;\r\nexport declare function onesLike(x: Tensor, dtype?: DataType, name?: string): LayerVariable;\r\nexport declare function eyeVariable(size: number, dtype?: DataType, name?: string): LayerVariable;\r\nexport declare function randomUniformVariable(shape: Shape, minval: number, maxval: number, dtype?: DataType, seed?: number, name?: string): LayerVariable;\r\nexport declare function truncatedNormalVariable(shape: Shape, mean?: number, stddev?: number, dtype?: DataType, seed?: number, name?: string): LayerVariable;\r\nexport declare function randomNormalVariable(shape: Shape, mean?: number, stddev?: number, dtype?: DataType, seed?: number, name?: string): LayerVariable;\r\nexport declare function update(x: LayerVariable, xNew: Tensor): LayerVariable;\r\nexport declare function updateAdd(x: LayerVariable, increment: Tensor): LayerVariable;\r\nexport declare function updateSub(x: LayerVariable, decrement: Tensor): LayerVariable;\r\nexport declare function batchGetValue(xs: LayerVariable[]): Tensor[];\r\nexport declare function batchSetValue(variablesAndValues: Array<[LayerVariable, Tensor]>): void;\r\n"}}
