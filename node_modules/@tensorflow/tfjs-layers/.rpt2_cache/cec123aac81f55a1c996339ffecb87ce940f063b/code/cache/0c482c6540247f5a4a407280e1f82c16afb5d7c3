{"code":"import * as tslib_1 from \"tslib\";\r\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\r\nimport * as K from '../backend/tfjs_backend';\r\nimport { getConstraint, serializeConstraint } from '../constraints';\r\nimport { Layer } from '../engine/topology';\r\nimport { NotImplementedError, ValueError } from '../errors';\r\nimport { getInitializer, serializeInitializer } from '../initializers';\r\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\r\nimport * as generic_utils from '../utils/generic_utils';\r\nimport { getExactlyOneShape } from '../utils/generic_utils';\r\nvar Embedding = (function (_super) {\r\n    tslib_1.__extends(Embedding, _super);\r\n    function Embedding(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.embeddings = null;\r\n        _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\r\n        if (config.batchInputShape == null && config.inputShape == null) {\r\n            var batchSize = null;\r\n            if (config.batchSize != null) {\r\n                batchSize = config.batchSize;\r\n            }\r\n            if (config.inputLength == null) {\r\n                _this.batchInputShape = [batchSize, null];\r\n            }\r\n            else {\r\n                _this.batchInputShape =\r\n                    [batchSize].concat(generic_utils.toList(config.inputLength));\r\n            }\r\n        }\r\n        _this.inputDim = config.inputDim;\r\n        _this.outputDim = config.outputDim;\r\n        _this.embeddingsInitializer = getInitializer(config.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);\r\n        _this.embeddingsRegularizer = getRegularizer(config.embeddingsRegularizer);\r\n        _this.activityRegularizer = getRegularizer(config.activityRegularizer);\r\n        _this.embeddingsConstraint = getConstraint(config.embeddingsConstraint);\r\n        _this.maskZero = config.maskZero;\r\n        _this.inputLength = config.inputLength;\r\n        return _this;\r\n    }\r\n    Embedding.prototype.build = function (inputShape) {\r\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\r\n        this.built = true;\r\n    };\r\n    Embedding.prototype.computeMask = function (inputs, mask) {\r\n        throw new NotImplementedError('computeMask has not been implemented for Embedding yet');\r\n    };\r\n    Embedding.prototype.computeOutputShape = function (inputShape) {\r\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\r\n        if (this.inputLength == null) {\r\n            return inputShape.concat([this.outputDim]);\r\n        }\r\n        var inLens = generic_utils.toList(this.inputLength);\r\n        if (inLens.length !== inputShape.length - 1) {\r\n            throw new ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" +\r\n                (\"input shape has shape \" + inputShape));\r\n        }\r\n        else {\r\n            var i = 0;\r\n            for (var k = 0; k < inLens.length; ++k) {\r\n                var s1 = inLens[k];\r\n                var s2 = inputShape[k + 1];\r\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\r\n                    throw new ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" +\r\n                        (\"input shape has shape \" + inputShape));\r\n                }\r\n                else if (s1 == null) {\r\n                    inLens[i] = s2;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        return [inputShape[0]].concat(inLens, [this.outputDim]);\r\n    };\r\n    Embedding.prototype.call = function (inputs, kwargs) {\r\n        var _this = this;\r\n        return tidy(function () {\r\n            _this.invokeCallHook(inputs, kwargs);\r\n            var input = generic_utils.getExactlyOneTensor(inputs);\r\n            if (K.dtype(input) !== 'int32') {\r\n                input = K.cast(input, 'int32');\r\n            }\r\n            var output = K.gather(_this.embeddings.read(), input.as1D());\r\n            return output.reshape(getExactlyOneShape(_this.computeOutputShape(input.shape)));\r\n        });\r\n    };\r\n    Embedding.prototype.getConfig = function () {\r\n        var config = {\r\n            inputDim: this.inputDim,\r\n            outputDim: this.outputDim,\r\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\r\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\r\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\r\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\r\n            maskZero: this.maskZero,\r\n            inputLength: this.inputLength\r\n        };\r\n        var baseConfig = _super.prototype.getConfig.call(this);\r\n        Object.assign(config, baseConfig);\r\n        return config;\r\n    };\r\n    Embedding.className = 'Embedding';\r\n    return Embedding;\r\n}(Layer));\r\nexport { Embedding };\r\nserialization.SerializationMap.register(Embedding);\r\n//# sourceMappingURL=embeddings.js.map","map":"{\"version\":3,\"file\":\"embeddings.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/layers/embeddings.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/layers/embeddings.d.ts","text":"import { serialization, Tensor } from '@tensorflow/tfjs-core';\r\nimport { Constraint, ConstraintIdentifier } from '../constraints';\r\nimport { Layer, LayerConfig } from '../engine/topology';\r\nimport { Initializer, InitializerIdentifier } from '../initializers';\r\nimport { Regularizer, RegularizerIdentifier } from '../regularizers';\r\nimport { Kwargs, Shape } from '../types';\r\nexport interface EmbeddingLayerConfig extends LayerConfig {\r\n    inputDim: number;\r\n    outputDim: number;\r\n    embeddingsInitializer?: InitializerIdentifier | Initializer;\r\n    embeddingsRegularizer?: RegularizerIdentifier | Regularizer;\r\n    activityRegularizer?: RegularizerIdentifier | Regularizer;\r\n    embeddingsConstraint?: ConstraintIdentifier | Constraint;\r\n    maskZero?: boolean;\r\n    inputLength?: number | number[];\r\n}\r\nexport declare class Embedding extends Layer {\r\n    static className: string;\r\n    private inputDim;\r\n    private outputDim;\r\n    private embeddingsInitializer;\r\n    private maskZero;\r\n    private inputLength;\r\n    private embeddings;\r\n    readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier;\r\n    private readonly embeddingsRegularizer?;\r\n    private readonly embeddingsConstraint?;\r\n    constructor(config: EmbeddingLayerConfig);\r\n    build(inputShape: Shape | Shape[]): void;\r\n    computeMask(inputs: Tensor | Tensor[], mask?: Tensor | Tensor[]): Tensor;\r\n    computeOutputShape(inputShape: Shape | Shape[]): Shape | Shape[];\r\n    call(inputs: Tensor | Tensor[], kwargs: Kwargs): Tensor | Tensor[];\r\n    getConfig(): serialization.ConfigDict;\r\n}\r\n"}}
