{"code":"import { ValueError } from '../errors';\r\nimport { pyListRepeat } from './generic_utils';\r\nimport { isInteger, max } from './math_utils';\r\nexport function normalizeArray(value, n, name) {\r\n    if (typeof value === 'number') {\r\n        return pyListRepeat(value, n);\r\n    }\r\n    else {\r\n        if (value.length !== n) {\r\n            throw new ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" +\r\n                (value.length + \" elements.\"));\r\n        }\r\n        for (var i = 0; i < n; ++i) {\r\n            var singleValue = value[i];\r\n            if (!isInteger(singleValue)) {\r\n                throw new ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" +\r\n                    (JSON.stringify(value) + \" including a non-integer number \") +\r\n                    (\"\" + singleValue));\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n}\r\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation) {\r\n    if (dilation === void 0) { dilation = 1; }\r\n    if (inputLength == null) {\r\n        return inputLength;\r\n    }\r\n    var dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\r\n    var outputLength;\r\n    if (padding === 'same') {\r\n        outputLength = inputLength;\r\n    }\r\n    else {\r\n        outputLength = inputLength - dilatedFilterSize + 1;\r\n    }\r\n    return Math.floor((outputLength + stride - 1) / stride);\r\n}\r\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\r\n    if (dimSize == null) {\r\n        return null;\r\n    }\r\n    if (padding === 'valid') {\r\n        dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\r\n    }\r\n    else if (padding === 'same') {\r\n        dimSize = dimSize * strideSize;\r\n    }\r\n    else {\r\n        throw new ValueError(\"Unsupport padding mode: \" + padding + \".\");\r\n    }\r\n    return dimSize;\r\n}\r\n//# sourceMappingURL=conv_utils.js.map","map":"{\"version\":3,\"file\":\"conv_utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/utils/conv_utils.ts\"],\"names\":[],\"mappings\":\"AAWA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAErC,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAC,SAAS,EAAE,GAAG,EAAC,MAAM,cAAc,CAAC;AAS5C,MAAM,yBACF,KAAsB,EAAE,CAAS,EAAE,IAAY;IACjD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KAC/B;SAAM;QACL,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,UAAU,CAChB,SAAO,IAAI,qCAAgC,CAAC,0BAAuB;iBAChE,KAAK,CAAC,MAAM,eAAY,CAAA,CAAC,CAAC;SAClC;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAC1B,IAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;gBAC3B,MAAM,IAAI,UAAU,CAChB,SAAO,IAAI,qCACP,CAAC,0BAAuB;qBACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,qCAAkC,CAAA;qBAC1D,KAAG,WAAa,CAAA,CAAC,CAAC;aACvB;SACF;QACD,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAUD,MAAM,2BACF,WAAmB,EAAE,UAAkB,EAAE,OAAoB,EAC7D,MAAc,EAAE,QAAY;IAAZ,yBAAA,EAAA,YAAY;IAC9B,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,OAAO,WAAW,CAAC;KACpB;IACD,IAAM,iBAAiB,GAAG,UAAU,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IACzE,IAAI,YAAoB,CAAC;IACzB,IAAI,OAAO,KAAK,MAAM,EAAE;QACtB,YAAY,GAAG,WAAW,CAAC;KAC5B;SAAM;QACL,YAAY,GAAG,WAAW,GAAG,iBAAiB,GAAG,CAAC,CAAC;KACpD;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,uBACF,OAAe,EAAE,UAAkB,EAAE,UAAkB,EACvD,OAAoB;IACtB,IAAI,OAAO,IAAI,IAAI,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,OAAO,KAAK,OAAO,EAAE;QACvB,OAAO,GAAG,OAAO,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;KACpE;SAAM,IAAI,OAAO,KAAK,MAAM,EAAE;QAC7B,OAAO,GAAG,OAAO,GAAG,UAAU,CAAC;KAChC;SAAM;QACL,MAAM,IAAI,UAAU,CAAC,6BAA2B,OAAO,MAAG,CAAC,CAAC;KAC7D;IACD,OAAO,OAAO,CAAC;AACjB,CAAC\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/utils/conv_utils.d.ts","text":"import { PaddingMode } from '../common';\r\nexport declare function normalizeArray(value: number | number[], n: number, name: string): number[];\r\nexport declare function convOutputLength(inputLength: number, filterSize: number, padding: PaddingMode, stride: number, dilation?: number): number;\r\nexport declare function deconvLength(dimSize: number, strideSize: number, kernelSize: number, padding: PaddingMode): number;\r\n"}}
