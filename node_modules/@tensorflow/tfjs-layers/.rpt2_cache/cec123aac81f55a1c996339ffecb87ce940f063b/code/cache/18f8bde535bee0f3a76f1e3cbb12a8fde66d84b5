{"code":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { tidy } from '@tensorflow/tfjs-core';\r\nimport * as K from './backend/tfjs_backend';\r\nimport { NotImplementedError, ValueError } from './errors';\r\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\r\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\r\nexport function binaryAccuracy(yTrue, yPred) {\r\n    return tidy(function () {\r\n        var threshold = K.scalarTimesArray(K.getScalar(0.5), tfc.onesLike(yPred));\r\n        var yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\r\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\r\n    });\r\n}\r\nexport function categoricalAccuracy(yTrue, yPred) {\r\n    return tidy(function () { return K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'); });\r\n}\r\nexport function binaryCrossentropy(yTrue, yPred) {\r\n    return lossBinaryCrossentropy(yTrue, yPred);\r\n}\r\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\r\n    throw new NotImplementedError();\r\n}\r\nexport function topKCategoricalAccuracy(yTrue, yPred) {\r\n    throw new NotImplementedError();\r\n}\r\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\r\n    throw new NotImplementedError();\r\n}\r\nexport var mse = meanSquaredError;\r\nexport var MSE = meanSquaredError;\r\nexport var mae = meanAbsoluteError;\r\nexport var MAE = meanAbsoluteError;\r\nexport var mape = meanAbsolutePercentageError;\r\nexport var MAPE = meanAbsolutePercentageError;\r\nexport var categoricalCrossentropy = categoricalCrossentropyLoss;\r\nexport var cosine = cosineProximity;\r\nexport var sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\r\nexport function get(identifier) {\r\n    var metricsMap = {\r\n        binaryAccuracy: binaryAccuracy,\r\n        categoricalAccuracy: categoricalAccuracy,\r\n        categoricalCrossentropy: categoricalCrossentropy,\r\n        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,\r\n        mse: mse,\r\n        MSE: MSE,\r\n        mae: mae,\r\n        MAE: MAE,\r\n        mape: mape,\r\n        MAPE: MAPE,\r\n        cosine: cosine,\r\n    };\r\n    if (typeof identifier === 'string' && identifier in metricsMap) {\r\n        return metricsMap[identifier];\r\n    }\r\n    else if (typeof identifier !== 'string' && identifier != null) {\r\n        return identifier;\r\n    }\r\n    else {\r\n        throw new ValueError(\"Unknown metric \" + identifier);\r\n    }\r\n}\r\n//# sourceMappingURL=metrics.js.map","map":"{\"version\":3,\"file\":\"metrics.js\",\"sourceRoot\":\"\",\"sources\":[\"src/metrics.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/smilkov/code/tfjs-layers/metrics.d.ts","text":"import { Tensor } from '@tensorflow/tfjs-core';\r\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\r\nimport { LossOrMetricFn } from './types';\r\nexport declare function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function sparseCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function topKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare function sparseTopKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor;\r\nexport declare const mse: typeof meanSquaredError;\r\nexport declare const MSE: typeof meanSquaredError;\r\nexport declare const mae: typeof meanAbsoluteError;\r\nexport declare const MAE: typeof meanAbsoluteError;\r\nexport declare const mape: typeof meanAbsolutePercentageError;\r\nexport declare const MAPE: typeof meanAbsolutePercentageError;\r\nexport declare const categoricalCrossentropy: typeof categoricalCrossentropyLoss;\r\nexport declare const cosine: typeof cosineProximity;\r\nexport declare const sparseCategoricalCrossentropy: typeof sparseCategoricalCrossentropyLoss;\r\nexport declare function get(identifier: string | LossOrMetricFn): LossOrMetricFn;\r\n"}}
