{"code":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { getParamValue } from './utils';\r\nexport var executeOp = function (node, tensorMap, context) {\r\n    switch (node.op) {\r\n        case 'conv1d': {\r\n            var stride = getParamValue('stride', node, tensorMap, context);\r\n            var pad = getParamValue('pad', node, tensorMap, context);\r\n            var dataFormat = getParamValue('dataFormat', node, tensorMap, context)\r\n                .toUpperCase();\r\n            var dilation = getParamValue('dilation', node, tensorMap, context);\r\n            return [tfc.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\r\n        }\r\n        case 'conv2d': {\r\n            var stride = getParamValue('strides', node, tensorMap, context);\r\n            var pad = getParamValue('pad', node, tensorMap, context);\r\n            var dataFormat = getParamValue('dataFormat', node, tensorMap, context)\r\n                .toUpperCase();\r\n            var dilations = getParamValue('dilations', node, tensorMap, context);\r\n            return [tfc.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\r\n        }\r\n        case 'conv2dTranspose': {\r\n            var shape = getParamValue('outputShape', node, tensorMap, context);\r\n            var stride = getParamValue('strides', node, tensorMap, context);\r\n            var pad = getParamValue('pad', node, tensorMap, context);\r\n            return [tfc.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\r\n        }\r\n        case 'depthwiseConv2d': {\r\n            var stride = getParamValue('strides', node, tensorMap, context);\r\n            var pad = getParamValue('pad', node, tensorMap, context);\r\n            var dilations = getParamValue('dilations', node, tensorMap, context);\r\n            var dataFormat = getParamValue('dataFormat', node, tensorMap, context)\r\n                .toUpperCase();\r\n            return [tfc.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\r\n        }\r\n        case 'avgPool': {\r\n            var stride = getParamValue('strides', node, tensorMap, context);\r\n            var pad = getParamValue('pad', node, tensorMap, context);\r\n            var kernelSize = getParamValue('kernelSize', node, tensorMap, context);\r\n            return [tfc.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\r\n        }\r\n        case 'maxPool': {\r\n            var stride = getParamValue('strides', node, tensorMap, context);\r\n            var pad = getParamValue('pad', node, tensorMap, context);\r\n            var kernelSize = getParamValue('kernelSize', node, tensorMap, context);\r\n            return [tfc.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\r\n        }\r\n        default:\r\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\r\n    }\r\n};\r\nexport var CATEGORY = 'convolution';\r\n//# sourceMappingURL=convolution_executor.js.map","map":"{\"version\":3,\"file\":\"convolution_executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/operations/executors/convolution_executor.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/piyu/ml/tfjs-converter/operations/executors/convolution_executor.d.ts","text":"import { OpExecutor } from './types';\r\nexport declare let executeOp: OpExecutor;\r\nexport declare const CATEGORY = \"convolution\";\r\n"}}
