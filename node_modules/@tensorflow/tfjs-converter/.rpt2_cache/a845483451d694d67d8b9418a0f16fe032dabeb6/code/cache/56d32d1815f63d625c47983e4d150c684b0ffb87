{"code":"var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport { getParamValue, getTensor } from './utils';\r\nexport var executeOp = function (node, tensorMap, context) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var _a, pred, data_1, inputName, frameId, data, tensor, input;\r\n    return tslib_1.__generator(this, function (_b) {\r\n        switch (_b.label) {\r\n            case 0:\r\n                _a = node.op;\r\n                switch (_a) {\r\n                    case 'loopCond': return [3, 1];\r\n                    case 'switch': return [3, 2];\r\n                    case 'merge': return [3, 4];\r\n                    case 'enter': return [3, 5];\r\n                    case 'exit': return [3, 6];\r\n                    case 'nextIteration': return [3, 7];\r\n                }\r\n                return [3, 8];\r\n            case 1: return [2, [getParamValue('pred', node, tensorMap, context)]];\r\n            case 2:\r\n                pred = getParamValue('pred', node, tensorMap, context);\r\n                data_1 = getParamValue('data', node, tensorMap, context);\r\n                return [4, pred.data()];\r\n            case 3: return [2, (_b.sent())[0] ? [undefined, data_1] : [data_1, undefined]];\r\n            case 4:\r\n                inputName = node.inputNames.find(function (name) { return getTensor(name, tensorMap, context) !== undefined; });\r\n                return [2, inputName ? [getTensor(inputName, tensorMap, context)] : undefined];\r\n            case 5:\r\n                frameId = getParamValue('frameName', node, tensorMap, context);\r\n                data = getParamValue('tensor', node, tensorMap, context);\r\n                context.enterFrame(frameId);\r\n                return [2, [data]];\r\n            case 6:\r\n                tensor = getParamValue('tensor', node, tensorMap, context);\r\n                context.exitFrame();\r\n                return [2, [tensor]];\r\n            case 7:\r\n                input = getParamValue('tensor', node, tensorMap, context);\r\n                context.nextIteration();\r\n                return [2, [input]];\r\n            case 8: throw TypeError(\"Node type \" + node.op + \" is not implemented\");\r\n        }\r\n    });\r\n}); };\r\nexport var CATEGORY = 'control';\r\n//# sourceMappingURL=control_executor.js.map","map":"{\"version\":3,\"file\":\"control_executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/operations/executors/control_executor.ts\"],\"names\":[],\"mappings\":\"AAiBA,iBAqDA;;AA9CA,OAAO,EAAC,aAAa,EAAE,SAAS,EAAC,MAAM,SAAS,CAAC;AAEjD,MAAM,CAAC,IAAI,SAAS,GAAe,UAC/B,IAAU,EAAE,SAA0B,EACtC,OAAyB;;;;;gBACnB,KAAA,IAAI,CAAC,EAAE,CAAA;;yBACR,UAAU,EAAV,MAAM,QAAI;yBAEV,QAAQ,EAAR,MAAM,QAAE;yBAQR,OAAO,EAAP,MAAM,QAAC;yBAKP,OAAO,EAAP,MAAM,QAAC;yBAQP,MAAM,EAAN,MAAM,QAAA;yBAMN,eAAe,EAAf,MAAM,QAAS;;;oBA5BlB,WAAO,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC,EAAC;;gBAEjE,IAAI,GACN,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;gBAC5D,SACF,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;gBAE1D,WAAM,IAAI,CAAC,IAAI,EAAE,EAAA;oBAAzB,WAAO,CAAC,SAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,MAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAI,EAAE,SAAS,CAAC,EAAC;;gBAGhE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAClC,UAAA,IAAI,IAAI,OAAA,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,SAAS,EAAjD,CAAiD,CAAC,CAAC;gBAC/D,WAAO,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAC;;gBAGpE,OAAO,GACT,aAAa,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;gBAC7D,IAAI,GACN,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;gBACpE,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAC5B,WAAO,CAAC,IAAI,CAAC,EAAC;;gBAGR,MAAM,GACR,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;gBACpE,OAAO,CAAC,SAAS,EAAE,CAAC;gBACpB,WAAO,CAAC,MAAM,CAAC,EAAC;;gBAGV,KAAK,GACP,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;gBACpE,OAAO,CAAC,aAAa,EAAE,CAAC;gBACxB,WAAO,CAAC,KAAK,CAAC,EAAC;oBAEf,MAAM,SAAS,CAAC,eAAa,IAAI,CAAC,EAAE,wBAAqB,CAAC,CAAC;;;KAEhE,CAAC;AAEF,MAAM,CAAC,IAAM,QAAQ,GAAG,SAAS,CAAC\"}","dts":{"name":"/usr/local/google/home/piyu/ml/tf-web-converter/operations/executors/control_executor.d.ts","text":"import { OpExecutor } from './types';\r\nexport declare let executeOp: OpExecutor;\r\nexport declare const CATEGORY = \"control\";\r\n"}}
