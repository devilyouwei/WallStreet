{"code":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { getParamValue, getTensor } from './utils';\r\nexport var executeOp = function (node, tensorMap, context) {\r\n    switch (node.op) {\r\n        case 'const': {\r\n            return tensorMap[node.name];\r\n        }\r\n        case 'placeholder':\r\n            var def = getParamValue('default', node, tensorMap, context);\r\n            return [getTensor(node.name, tensorMap, context) || def];\r\n        case 'identity':\r\n        case 'stopGradient':\r\n        case 'fakeQuantWithMinMaxVars':\r\n            return [getParamValue('x', node, tensorMap, context)];\r\n        case 'snapshot':\r\n            var snapshot = getParamValue('x', node, tensorMap, context);\r\n            return [snapshot.clone()];\r\n        case 'shape':\r\n            return [tfc.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\r\n        case 'noop':\r\n            return [];\r\n        case 'print':\r\n            var input = getParamValue('x', node, tensorMap, context);\r\n            var data = getParamValue('data', node, tensorMap, context);\r\n            var message = getParamValue('message', node, tensorMap, context);\r\n            var summarize = getParamValue('summarize', node, tensorMap, context);\r\n            console.warn('The graph has a tf.print() operation,' +\r\n                'usually used for debugging, which slows down performance.');\r\n            console.log(message);\r\n            for (var i = 0; i < data.length; i++) {\r\n                console.log(Array.prototype.slice.call(data[0].dataSync()).slice(0, summarize));\r\n            }\r\n            return [input];\r\n        default:\r\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\r\n    }\r\n};\r\nexport var CATEGORY = 'graph';\r\n//# sourceMappingURL=graph_executor.js.map","map":"{\"version\":3,\"file\":\"graph_executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/operations/executors/graph_executor.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAO7C,OAAO,EAAC,aAAa,EAAE,SAAS,EAAC,MAAM,SAAS,CAAC;AAEjD,MAAM,CAAC,IAAI,SAAS,GAAe,UAAC,IAAU,EAAE,SAA0B,EACtC,OAAyB;IAE3D,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,KAAK,OAAO,EAAE,CAAC;YACb,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,KAAK,aAAa;YAChB,IAAM,GAAG,GACL,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;YACrE,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;QAC3D,KAAK,UAAU,CAAC;QAChB,KAAK,cAAc,CAAC;QACpB,KAAK,yBAAyB;YAC5B,MAAM,CAAC,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC,CAAC;QACtE,KAAK,UAAU;YACb,IAAM,QAAQ,GACT,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAgB,CAAC;YACjE,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;QAC5B,KAAK,OAAO;YACV,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,CACf,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAgB,CAAC,KAAK,EAClE,OAAO,CAAC,CAAC,CAAC;QAChB,KAAK,MAAM;YACT,MAAM,CAAC,EAAE,CAAC;QACZ,KAAK,OAAO;YACV,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAe,CAAC;YACzE,IAAM,IAAI,GACN,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAiB,CAAC;YACpE,IAAM,OAAO,GACT,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACjE,IAAM,SAAS,GACX,aAAa,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACnE,OAAO,CAAC,IAAI,CACR,uCAAuC;gBACvC,2DAA2D,CAAC,CAAC;YACjE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CACP,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;QAEjB;YACE,MAAM,SAAS,CAAC,eAAa,IAAI,CAAC,EAAE,wBAAqB,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,QAAQ,GAAG,OAAO,CAAC\"}","dts":{"name":"/usr/local/google/home/piyu/ml/tfjs-converter/operations/executors/graph_executor.d.ts","text":"import { OpExecutor } from './types';\r\nexport declare let executeOp: OpExecutor;\r\nexport declare const CATEGORY = \"graph\";\r\n"}}
