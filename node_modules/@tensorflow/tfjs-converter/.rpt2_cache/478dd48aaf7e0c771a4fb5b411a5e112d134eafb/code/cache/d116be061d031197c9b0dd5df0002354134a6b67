{"code":"import * as tfc from '@tensorflow/tfjs-core';\r\nimport { getParamValue } from './utils';\r\nexport var executeOp = function (node, tensorMap, context) {\r\n    switch (node.op) {\r\n        case 'equal': {\r\n            return [tfc.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'notEqual': {\r\n            return [tfc.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'greater': {\r\n            return [tfc.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'greaterEqual': {\r\n            return [tfc.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'less': {\r\n            return [tfc.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'lessEqual': {\r\n            return [tfc.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'logicalAnd': {\r\n            return [tfc.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'logicalNot': {\r\n            return [tfc.logicalNot(getParamValue('a', node, tensorMap, context))];\r\n        }\r\n        case 'logicalOr': {\r\n            return [tfc.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'where': {\r\n            return [tfc.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        default:\r\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\r\n    }\r\n};\r\nexport var CATEGORY = 'logical';\r\n//# sourceMappingURL=logical_executor.js.map","map":"{\"version\":3,\"file\":\"logical_executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/operations/executors/logical_executor.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/piyu/ml/tfjs-converter/operations/executors/logical_executor.d.ts","text":"import { OpExecutor } from './types';\r\nexport declare let executeOp: OpExecutor;\r\nexport declare const CATEGORY = \"logical\";\r\n"}}
