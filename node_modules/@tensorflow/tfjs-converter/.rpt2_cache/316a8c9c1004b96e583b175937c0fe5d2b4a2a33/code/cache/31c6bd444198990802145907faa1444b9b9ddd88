{"code":"import * as tf from '@tensorflow/tfjs';\r\nimport { getParamValue } from './utils';\r\nexport var executeOp = function (node, tensorMap, context) {\r\n    switch (node.op) {\r\n        case 'concat': {\r\n            var axis = getParamValue('axis', node, tensorMap, context);\r\n            var inputs = getParamValue('tensors', node, tensorMap, context);\r\n            return [tf.concat(inputs, axis)];\r\n        }\r\n        case 'gather': {\r\n            var axis = getParamValue('axis', node, tensorMap, context);\r\n            var input = getParamValue('x', node, tensorMap, context);\r\n            var indices = getParamValue('indices', node, tensorMap, context);\r\n            return [tf.gather(input, indices, axis)];\r\n        }\r\n        case 'reverse': {\r\n            var axis = getParamValue('axis', node, tensorMap, context);\r\n            var input = getParamValue('x', node, tensorMap, context);\r\n            return [tf.reverse(input, axis)];\r\n        }\r\n        case 'slice': {\r\n            var begin = getParamValue('begin', node, tensorMap, context);\r\n            var size = getParamValue('size', node, tensorMap, context);\r\n            return [tf.slice(getParamValue('x', node, tensorMap, context), begin, size)];\r\n        }\r\n        case 'stridedSlice': {\r\n            var begin = getParamValue('begin', node, tensorMap, context);\r\n            var end = getParamValue('end', node, tensorMap, context);\r\n            var strides = getParamValue('strides', node, tensorMap, context);\r\n            var beginMask = getParamValue('beginMask', node, tensorMap, context);\r\n            var endMask = getParamValue('endMask', node, tensorMap, context);\r\n            return [tf.stridedSlice(getParamValue('x', node, tensorMap, context), begin, end, strides, beginMask, endMask)];\r\n        }\r\n        case 'stack': {\r\n            return tf.tidy(function () {\r\n                var axis = getParamValue('axis', node, tensorMap, context);\r\n                var tensors = getParamValue('tensors', node, tensorMap, context);\r\n                var shape = tensors[0].shape;\r\n                var squeezedShape = tensors[0].squeeze().shape;\r\n                var mapped = tensors.map(function (tensor) {\r\n                    var sameShape = tf.util.arraysEqual(tensor.shape, shape);\r\n                    if (!sameShape &&\r\n                        !tf.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\r\n                        throw new Error('the input tensors shape does not match');\r\n                    }\r\n                    return sameShape ? tensor : tensor.reshape(shape);\r\n                });\r\n                return [tf.stack(mapped, axis)];\r\n            });\r\n        }\r\n        case 'tile': {\r\n            var reps = getParamValue('reps', node, tensorMap, context);\r\n            return [tf.tile(getParamValue('x', node, tensorMap, context), reps)];\r\n        }\r\n        case 'split': {\r\n            var axis = getParamValue('axis', node, tensorMap, context);\r\n            var numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\r\n            return tf.split(getParamValue('x', node, tensorMap, context), numOrSizeSplits, axis);\r\n        }\r\n        default:\r\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\r\n    }\r\n};\r\nexport var CATEGORY = 'slice_join';\r\n//# sourceMappingURL=slice_join_executor.js.map","map":"{\"version\":3,\"file\":\"slice_join_executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/operations/executors/slice_join_executor.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAOvC,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;AAEtC,MAAM,CAAC,IAAI,SAAS,GAAe,UAAC,IAAU,EAAE,SAA0B,EACtC,OAAyB;IAC3D,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,KAAK,QAAQ,EAAE,CAAC;YACd,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACvE,IAAM,MAAM,GACR,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAgB,CAAC;YACtE,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,KAAK,QAAQ,EAAE,CAAC;YACd,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACvE,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAc,CAAC;YACxE,IAAM,OAAO,GACT,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAgB,CAAC;YACtE,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3C,CAAC;QACD,KAAK,SAAS,EAAE,CAAC;YACf,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACvE,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAc,CAAC;YACxE,MAAM,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,KAAK,OAAO,EAAE,CAAC;YAEb,IAAM,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAQ,CAAC;YAEtE,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAQ,CAAC;YACpE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CACZ,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAc,EAAE,KAAK,EAChE,IAAI,CAAC,CAAC,CAAC;QACb,CAAC;QACD,KAAK,cAAc,EAAE,CAAC;YACpB,IAAM,KAAK,GACP,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAa,CAAC;YACjE,IAAM,GAAG,GAAG,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAa,CAAC;YACvE,IAAM,OAAO,GACT,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAa,CAAC;YACnE,IAAM,SAAS,GACX,aAAa,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACnE,IAAM,OAAO,GACT,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACjE,MAAM,CAAC,CAAC,EAAE,CAAC,YAAY,CACnB,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAc,EAAE,KAAK,EAAE,GAAG,EACrE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QACpC,CAAC;QACD,KAAK,OAAO,EAAE,CAAC;YACb,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;gBACb,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;gBACvE,IAAM,OAAO,GACT,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAgB,CAAC;gBAEtE,IAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC/B,IAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC;gBACjD,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;oBAC/B,IAAM,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,CAAC,SAAS;wBACV,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;wBAChE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;oBAC5D,CAAC;oBACD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC;QACD,KAAK,MAAM,EAAE,CAAC;YACZ,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAa,CAAC;YACzE,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CACX,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAc,EAAE,IAAI,CAAC,CAAC,CAAC;QACxE,CAAC;QACD,KAAK,OAAO,EAAE,CAAC;YACb,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACvE,IAAM,eAAe,GACjB,aAAa,CAAC,iBAAiB,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW,CAAC;YACzE,MAAM,CAAC,EAAE,CAAC,KAAK,CACX,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAc,EACzD,eAAe,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QACD;YACE,MAAM,SAAS,CAAC,eAAa,IAAI,CAAC,EAAE,wBAAqB,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,QAAQ,GAAG,YAAY,CAAC\"}","dts":{"name":"/usr/local/google/home/piyu/ml/tf-web-converter/operations/executors/slice_join_executor.d.ts","text":"import { OpExecutor } from './types';\r\nexport declare let executeOp: OpExecutor;\r\nexport declare const CATEGORY = \"slice_join\";\r\n"}}
